{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","addNewTask","trim","value","placeholder","onChange","target","Tasks","tasks","map","task","done","hideDone","onClick","toggleTasksDone","id","content","removeTask","Buttons","length","toggleHideDone","disabled","every","setAllDone","Section","title","body","App","setHideDone","tasksFromLocaleStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c90e4250.chunk.js","sourcesContent":["import {useState} from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nconst Form = (props) => {\r\n\r\nconst [newTaskContent, setNewTaskContent] = useState(\"\");\r\nconst onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.addNewTask(newTaskContent.trim());\r\n    setNewTaskContent(\"\");\r\n};\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input \r\n            value= {newTaskContent}\r\n            placeholder=\"Wpisz zadanie\"\r\n            onChange = {(event) => setNewTaskContent(event.target.value)} \r\n            />\r\n            <button className=\"form__button\">Dodaj zadanie</button>\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nexport default Form;","import \"./style.css\";\r\n\r\nconst Tasks = (props) => (\r\n    <ul className=\"list\">\r\n        {props.tasks.map(task => (\r\n            <li className={`list__item ${task.done && props.hideDone ? \"list__item--hidden\" : \"\"}`}>\r\n                <button\r\n                    className={`${task.done ? \" list__button--done\" : \" list__button--undone\"}`}\r\n                    onClick={() => props.toggleTasksDone(task.id)}\r\n                >\r\n                    âœ”\r\n                </button>\r\n                <span className={`${task.done ? \"doneTask\" : \"\"}`}> {task.content}</span>\r\n                <button onClick={() => props.removeTask(task.id)} className=\"list__button--remove\">ðŸ—‘</button>\r\n            </li >\r\n        ))}\r\n    </ul >\r\n\r\n);\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Buttons = (props) => {\r\n    if (props.tasks.length === 0) {\r\n\r\n\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"buttons\">\r\n            <button onClick={props.toggleHideDone} className=\" buttons__button  \">\r\n                {props.hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n            </button>\r\n            <button\r\n                className=\"buttons__button\"\r\n                disabled ={props.tasks.every(({ done }) => done)}\r\n                onClick={() => props.setAllDone()}\r\n                \r\n            >\r\n                UkoÅ„cz wszystkie\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Section = ({title, body}) => (\r\n    <section className=\"section\">\r\n        \r\n            <h2 className=\"section__header\">{title}</h2>\r\n            {body}\r\n        \r\n    </section>\r\n)\r\n\r\nexport default Section;","import {useEffect, useState} from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\n\n\n\n\n\nfunction App() {\nconst [hideDone, setHideDone] = useState(false);\nconst tasksFromLocaleStorage = localStorage.getItem(\"tasks\");\nconst [tasks, setTasks] = useState(\n  tasksFromLocaleStorage\n  ? JSON.parse(tasksFromLocaleStorage)\n  : []\n)\n\nuseEffect(() => {\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n}, [tasks]);\n\n\n\nconst toggleHideDone = () => {\n  setHideDone(hideDone => !hideDone)\n};\n\nconst removeTask = (id) => {\n  setTasks(tasks => tasks.filter(task => task.id !== id))\n};\n\nconst toggleTasksDone = (id) => {\n  setTasks(tasks => tasks.map(task => {\n    if (task.id === id) {\n      return {...task, done: !task.done};\n    }\n      return task;\n\n    \n  }) )\n};\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n       done: true,\n      })));\n  };\n\n  const addNewTask = (newTaskContent) => {\n    setTasks(tasks =>\n      [...tasks,\n      {\n        content: newTaskContent,\n        done: false,\n        id: tasks.length === 0 ? 1 : tasks[tasks.length -1].id +1,\n      },\n      ]\n      )\n  };\n\n  return (\n    <main className=\"container\">\n      <h1>Lista zadaÅ„</h1>\n      <Section title=\"Dodaj nowe zadanie\" body={<Form addNewTask={addNewTask} />} />\n      <Section title=\"Lista zadaÅ„\" \n      body={<Buttons \n      tasks={tasks} \n      hideDone={hideDone} \n      toggleHideDone={toggleHideDone} \n      setAllDone={setAllDone}\n      \n      />\n    } \n      />\n\n      <Tasks \n      tasks={tasks} \n      hideDone={hideDone} \n      removeTask={removeTask} \n      toggleTasksDone={toggleTasksDone}\n      />\n\n\n    </main>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}